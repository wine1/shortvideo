"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
let dataAny;
Component({
    properties: {
        src: {
            type: String,
            value: ''
        },
        seek: {
            type: Boolean,
            value: false,
            observer: function observer(val) {
                setTimeout(() => {
                    val ? this.data._videoContext.seek(0) : '';
                }, 1000);
            }
        },
        isCurrent: {
            type: Boolean,
            value: true,
        },
        isLoading: {
            type: Boolean,
            value: false,
        },
        isPlay: {
            type: Boolean,
            value: false,
            observer: function observer(val) {
                if (val) {
                    this.data._videoContext.play();
                }
                else {
                    setTimeout(() => {
                        this.data._videoContext.pause();
                    }, 100);
                }
            }
        }
    },
    data: {
        _videoContext: dataAny,
        barWidth: 0,
    },
    lifetimes: {
        attached() {
            this.data._videoContext = wx.createVideoContext('video', this);
        }
    },
    observers: {},
    methods: {
        onTimeUpdate: function onTimeUpdate(e) {
            if (this.data.seek) {
                this.setData({
                    seek: false
                });
            }
            let molecule = e.detail.currentTime;
            let denominator = e.detail.duration;
            let barWidth = molecule / denominator * 100;
            this.setData({
                barWidth,
                isLoading: false
            });
        },
        onWaiting: function onWaiting(e) {
            console.log('wait', e);
            this.setData({
                isLoading: true
            });
        },
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXBWaWRlby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1wVmlkZW8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxJQUFJLE9BQVksQ0FBQTtBQUNoQixTQUFTLENBQUM7SUFFUixVQUFVLEVBQUU7UUFDVixHQUFHLEVBQUU7WUFDSCxJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxFQUFFO1NBQ1Y7UUFDRCxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsT0FBTztZQUNiLEtBQUssRUFBRSxLQUFLO1lBQ1osUUFBUSxFQUFFLFNBQVMsUUFBUSxDQUFDLEdBQUc7Z0JBQzdCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7b0JBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtnQkFDNUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQ1YsQ0FBQztTQUNGO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsSUFBSTtTQUNaO1FBQ0QsU0FBUyxFQUFDO1lBQ1IsSUFBSSxFQUFDLE9BQU87WUFDWixLQUFLLEVBQUMsS0FBSztTQUNaO1FBQ0QsTUFBTSxFQUFFO1lBQ04sSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsS0FBSztZQUNaLFFBQVEsRUFBRSxTQUFTLFFBQVEsQ0FBQyxHQUFHO2dCQUM3QixJQUFJLEdBQUcsRUFBRTtvQkFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtpQkFDL0I7cUJBQU07b0JBRUwsVUFBVSxDQUFDLEdBQUcsRUFBRTt3QkFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtvQkFDakMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO2lCQUNSO1lBQ0gsQ0FBQztTQUNGO0tBQ0Y7SUFFRCxJQUFJLEVBQUU7UUFDSixhQUFhLEVBQUUsT0FBTztRQUN0QixRQUFRLEVBQUUsQ0FBQztLQUNaO0lBRUQsU0FBUyxFQUFFO1FBQ1QsUUFBUTtZQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDaEUsQ0FBQztLQUNGO0lBQ0QsU0FBUyxFQUFFLEVBQUU7SUFFYixPQUFPLEVBQUU7UUFDUCxZQUFZLEVBQUUsU0FBUyxZQUFZLENBQUMsQ0FBTTtZQUV4QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDO29CQUNYLElBQUksRUFBRSxLQUFLO2lCQUNaLENBQUMsQ0FBQTthQUNIO1lBQ0QsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUE7WUFDbkMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUE7WUFDbkMsSUFBSSxRQUFRLEdBQUcsUUFBUSxHQUFHLFdBQVcsR0FBRyxHQUFHLENBQUE7WUFDM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDWCxRQUFRO2dCQUNSLFNBQVMsRUFBQyxLQUFLO2FBQ2hCLENBQUMsQ0FBQTtRQUNKLENBQUM7UUFpQkQsU0FBUyxFQUFFLFNBQVMsU0FBUyxDQUFDLENBQU07WUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDWCxTQUFTLEVBQUMsSUFBSTthQUNmLENBQUMsQ0FBQTtRQUNKLENBQUM7S0FPRjtDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlxubGV0IGRhdGFBbnk6IGFueVxuQ29tcG9uZW50KHtcblxuICBwcm9wZXJ0aWVzOiB7XG4gICAgc3JjOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICB2YWx1ZTogJydcbiAgICB9LFxuICAgIHNlZWs6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICBvYnNlcnZlcjogZnVuY3Rpb24gb2JzZXJ2ZXIodmFsKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHZhbCA/IHRoaXMuZGF0YS5fdmlkZW9Db250ZXh0LnNlZWsoMCkgOiAnJ1xuICAgICAgICB9LCAxMDAwKVxuICAgICAgfVxuICAgIH0sXG4gICAgaXNDdXJyZW50OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBpc0xvYWRpbmc6e1xuICAgICAgdHlwZTpCb29sZWFuLFxuICAgICAgdmFsdWU6ZmFsc2UsXG4gICAgfSxcbiAgICBpc1BsYXk6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICBvYnNlcnZlcjogZnVuY3Rpb24gb2JzZXJ2ZXIodmFsKSB7XG4gICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICB0aGlzLmRhdGEuX3ZpZGVvQ29udGV4dC5wbGF5KClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyDlronljZPnnJ/mnLp2aWRlb0NvbnRleHQucGF1c2UoKeaWueazleS4jei1t+S9nOeUqO+8n+WKoOWumuaXtuWZqFxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYXRhLl92aWRlb0NvbnRleHQucGF1c2UoKVxuICAgICAgICAgIH0sIDEwMClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBkYXRhOiB7XG4gICAgX3ZpZGVvQ29udGV4dDogZGF0YUFueSwvL3ZpZGVv55qE5a6e5L6LXG4gICAgYmFyV2lkdGg6IDAsLy/ov5vluqbmnaFcbiAgfSxcblxuICBsaWZldGltZXM6IHtcbiAgICBhdHRhY2hlZCgpIHtcbiAgICAgIHRoaXMuZGF0YS5fdmlkZW9Db250ZXh0ID0gd3guY3JlYXRlVmlkZW9Db250ZXh0KCd2aWRlbycsIHRoaXMpXG4gICAgfVxuICB9LFxuICBvYnNlcnZlcnM6IHt9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBvblRpbWVVcGRhdGU6IGZ1bmN0aW9uIG9uVGltZVVwZGF0ZShlOiBhbnkpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdvblRpbWVVcGRhdGUnLCBlKVxuICAgICAgaWYgKHRoaXMuZGF0YS5zZWVrKSB7XG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgc2VlazogZmFsc2VcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGxldCBtb2xlY3VsZSA9IGUuZGV0YWlsLmN1cnJlbnRUaW1lXG4gICAgICBsZXQgZGVub21pbmF0b3IgPSBlLmRldGFpbC5kdXJhdGlvblxuICAgICAgbGV0IGJhcldpZHRoID0gbW9sZWN1bGUgLyBkZW5vbWluYXRvciAqIDEwMFxuICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgYmFyV2lkdGgsXG4gICAgICAgIGlzTG9hZGluZzpmYWxzZVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8vIG9uU2Vla2NvbXBsZXRlKGU6IGFueSkge1xuICAgIC8vICAgY29uc29sZS5sb2coJ29uU2Vla2NvbXBsZXRlJywgZSlcbiAgICAvLyB9LFxuICAgIC8vIG9uUGxheShlOiBhbnkpIHtcbiAgICAvLyAgIGNvbnNvbGUubG9nKCdwbGF5JywgZSlcbiAgICAvLyB9LFxuICAgIC8vIG9uUGF1c2U6IGZ1bmN0aW9uIG9uUGF1c2UoZTogYW55KSB7XG4gICAgLy8gICBjb25zb2xlLmxvZygncGF1c2UnLCBlKVxuICAgIC8vIH0sXG4gICAgLy8gb25FbmRlZDogZnVuY3Rpb24gb25FbmRlZChlOiBhbnkpIHtcbiAgICAvLyAgIGNvbnNvbGUubG9nKCdlbmRlZCcsIGUpXG4gICAgLy8gfSxcbiAgICAvLyBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKGU6IGFueSkge1xuICAgIC8vICAgY29uc29sZS5sb2coJ2Vycm9yJywgZSlcbiAgICAvLyB9LFxuXG4gICAgb25XYWl0aW5nOiBmdW5jdGlvbiBvbldhaXRpbmcoZTogYW55KSB7XG4gICAgICBjb25zb2xlLmxvZygnd2FpdCcsIGUpXG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICBpc0xvYWRpbmc6dHJ1ZVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8vIG9uUHJvZ3Jlc3M6IGZ1bmN0aW9uIG9uUHJvZ3Jlc3MoZTogYW55KSB7XG4gICAgLy8gICBjb25zb2xlLmxvZygncHJvZ3Jlc3MnLCBlKVxuICAgIC8vIH0sXG4gICAgLy8gb25Mb2FkZWRNZXRhRGF0YTogZnVuY3Rpb24gb25Mb2FkZWRNZXRhRGF0YShlOiBhbnkpIHtcbiAgICAvLyAgIGNvbnNvbGUubG9nKCdsb2FkZWRNZXRhRGF0YScsIGUpXG4gICAgLy8gfSxcbiAgfVxufSlcblxuZXhwb3J0IHsgfSJdfQ==
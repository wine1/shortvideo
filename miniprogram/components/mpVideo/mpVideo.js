"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
let dataAny;
Component({
    properties: {
        src: {
            type: String,
            value: ''
        },
        seek: {
            type: Boolean,
            value: false,
            observer: function observer(val) {
                setTimeout(() => {
                    val ? this.data._videoContext.seek(0) : '';
                }, 1000);
            }
        },
        isCurrent: {
            type: Boolean,
            value: true,
        },
        isPlay: {
            type: Boolean,
            value: false,
            observer: function observer(val) {
                if (val) {
                    this.data._videoContext.play();
                }
                else {
                    setTimeout(() => {
                        this.data._videoContext.pause();
                    }, 100);
                }
            }
        }
    },
    data: {
        _videoContext: dataAny,
        barWidth: 0,
    },
    lifetimes: {
        attached() {
            this.data._videoContext = wx.createVideoContext('video', this);
        }
    },
    observers: {},
    methods: {
        onTimeUpdate: function onTimeUpdate(e) {
            if (this.data.seek) {
                this.setData({
                    seek: false
                });
            }
            let molecule = e.detail.currentTime;
            let denominator = e.detail.duration;
            let barWidth = molecule / denominator * 100;
            this.setData({
                barWidth
            });
        },
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXBWaWRlby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1wVmlkZW8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxJQUFJLE9BQVksQ0FBQTtBQUNoQixTQUFTLENBQUM7SUFFUixVQUFVLEVBQUU7UUFDVixHQUFHLEVBQUU7WUFDSCxJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxFQUFFO1NBQ1Y7UUFDRCxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsT0FBTztZQUNiLEtBQUssRUFBRSxLQUFLO1lBQ1osUUFBUSxFQUFFLFNBQVMsUUFBUSxDQUFDLEdBQUc7Z0JBQzdCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7b0JBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQTtnQkFDNUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQ1YsQ0FBQztTQUNGO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsSUFBSTtTQUNaO1FBQ0QsTUFBTSxFQUFFO1lBQ04sSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsS0FBSztZQUNaLFFBQVEsRUFBRSxTQUFTLFFBQVEsQ0FBQyxHQUFHO2dCQUM3QixJQUFJLEdBQUcsRUFBRTtvQkFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtpQkFDL0I7cUJBQU07b0JBRUwsVUFBVSxDQUFDLEdBQUcsRUFBRTt3QkFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtvQkFDakMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO2lCQUNSO1lBQ0gsQ0FBQztTQUNGO0tBQ0Y7SUFFRCxJQUFJLEVBQUU7UUFDSixhQUFhLEVBQUUsT0FBTztRQUN0QixRQUFRLEVBQUUsQ0FBQztLQUNaO0lBRUQsU0FBUyxFQUFFO1FBQ1QsUUFBUTtZQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDaEUsQ0FBQztLQUNGO0lBQ0QsU0FBUyxFQUFFLEVBQUU7SUFFYixPQUFPLEVBQUU7UUFDUCxZQUFZLEVBQUUsU0FBUyxZQUFZLENBQUMsQ0FBTTtZQUV4QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDO29CQUNYLElBQUksRUFBRSxLQUFLO2lCQUNaLENBQUMsQ0FBQTthQUNIO1lBQ0QsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUE7WUFDbkMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUE7WUFDbkMsSUFBSSxRQUFRLEdBQUcsUUFBUSxHQUFHLFdBQVcsR0FBRyxHQUFHLENBQUE7WUFDM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDWCxRQUFRO2FBQ1QsQ0FBQyxDQUFBO1FBQ0osQ0FBQztLQTBCRjtDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5sZXQgZGF0YUFueTogYW55XHJcbkNvbXBvbmVudCh7XHJcblxyXG4gIHByb3BlcnRpZXM6IHtcclxuICAgIHNyYzoge1xyXG4gICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgIHZhbHVlOiAnJ1xyXG4gICAgfSxcclxuICAgIHNlZWs6IHtcclxuICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICBvYnNlcnZlcjogZnVuY3Rpb24gb2JzZXJ2ZXIodmFsKSB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICB2YWwgPyB0aGlzLmRhdGEuX3ZpZGVvQ29udGV4dC5zZWVrKDApIDogJydcclxuICAgICAgICB9LCAxMDAwKVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgaXNDdXJyZW50OiB7XHJcbiAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgIHZhbHVlOiB0cnVlLFxyXG4gICAgfSxcclxuICAgIGlzUGxheToge1xyXG4gICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICAgIG9ic2VydmVyOiBmdW5jdGlvbiBvYnNlcnZlcih2YWwpIHtcclxuICAgICAgICBpZiAodmFsKSB7XHJcbiAgICAgICAgICB0aGlzLmRhdGEuX3ZpZGVvQ29udGV4dC5wbGF5KClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8g5a6J5Y2T55yf5py6dmlkZW9Db250ZXh0LnBhdXNlKCnmlrnms5XkuI3otbfkvZznlKjvvJ/liqDlrprml7blmahcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuX3ZpZGVvQ29udGV4dC5wYXVzZSgpXHJcbiAgICAgICAgICB9LCAxMDApXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgZGF0YToge1xyXG4gICAgX3ZpZGVvQ29udGV4dDogZGF0YUFueSwvL3ZpZGVv55qE5a6e5L6LXHJcbiAgICBiYXJXaWR0aDogMCwvL+i/m+W6puadoVxyXG4gIH0sXHJcblxyXG4gIGxpZmV0aW1lczoge1xyXG4gICAgYXR0YWNoZWQoKSB7XHJcbiAgICAgIHRoaXMuZGF0YS5fdmlkZW9Db250ZXh0ID0gd3guY3JlYXRlVmlkZW9Db250ZXh0KCd2aWRlbycsIHRoaXMpXHJcbiAgICB9XHJcbiAgfSxcclxuICBvYnNlcnZlcnM6IHt9LFxyXG5cclxuICBtZXRob2RzOiB7XHJcbiAgICBvblRpbWVVcGRhdGU6IGZ1bmN0aW9uIG9uVGltZVVwZGF0ZShlOiBhbnkpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ29uVGltZVVwZGF0ZScsIGUpXHJcbiAgICAgIGlmICh0aGlzLmRhdGEuc2Vlaykge1xyXG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICBzZWVrOiBmYWxzZVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgICAgbGV0IG1vbGVjdWxlID0gZS5kZXRhaWwuY3VycmVudFRpbWVcclxuICAgICAgbGV0IGRlbm9taW5hdG9yID0gZS5kZXRhaWwuZHVyYXRpb25cclxuICAgICAgbGV0IGJhcldpZHRoID0gbW9sZWN1bGUgLyBkZW5vbWluYXRvciAqIDEwMFxyXG4gICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgIGJhcldpZHRoXHJcbiAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgLy8gb25TZWVrY29tcGxldGUoZTogYW55KSB7XHJcbiAgICAvLyAgIGNvbnNvbGUubG9nKCdvblNlZWtjb21wbGV0ZScsIGUpXHJcbiAgICAvLyB9LFxyXG4gICAgLy8gb25QbGF5KGU6IGFueSkge1xyXG4gICAgLy8gICBjb25zb2xlLmxvZygncGxheScsIGUpXHJcbiAgICAvLyB9LFxyXG4gICAgLy8gb25QYXVzZTogZnVuY3Rpb24gb25QYXVzZShlOiBhbnkpIHtcclxuICAgIC8vICAgY29uc29sZS5sb2coJ3BhdXNlJywgZSlcclxuICAgIC8vIH0sXHJcbiAgICAvLyBvbkVuZGVkOiBmdW5jdGlvbiBvbkVuZGVkKGU6IGFueSkge1xyXG4gICAgLy8gICBjb25zb2xlLmxvZygnZW5kZWQnLCBlKVxyXG4gICAgLy8gfSxcclxuICAgIC8vIG9uRXJyb3I6IGZ1bmN0aW9uIG9uRXJyb3IoZTogYW55KSB7XHJcbiAgICAvLyAgIGNvbnNvbGUubG9nKCdlcnJvcicsIGUpXHJcbiAgICAvLyB9LFxyXG5cclxuICAgIC8vIG9uV2FpdGluZzogZnVuY3Rpb24gb25XYWl0aW5nKGU6IGFueSkge1xyXG4gICAgLy8gICBjb25zb2xlLmxvZygnd2FpdCcsIGUpXHJcbiAgICAvLyB9LFxyXG4gICAgLy8gb25Qcm9ncmVzczogZnVuY3Rpb24gb25Qcm9ncmVzcyhlOiBhbnkpIHtcclxuICAgIC8vICAgY29uc29sZS5sb2coJ3Byb2dyZXNzJywgZSlcclxuICAgIC8vIH0sXHJcbiAgICAvLyBvbkxvYWRlZE1ldGFEYXRhOiBmdW5jdGlvbiBvbkxvYWRlZE1ldGFEYXRhKGU6IGFueSkge1xyXG4gICAgLy8gICBjb25zb2xlLmxvZygnbG9hZGVkTWV0YURhdGEnLCBlKVxyXG4gICAgLy8gfSxcclxuICB9XHJcbn0pXHJcblxyXG5leHBvcnQgeyB9Il19
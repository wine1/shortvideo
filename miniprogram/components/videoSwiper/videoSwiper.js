"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
let touchDotX = 0;
let touchDotY = 0;
Component({
    properties: {
        duration: {
            type: Number,
            value: 500
        },
        easingFunction: {
            type: String,
            value: 'default'
        },
        loop: {
            type: Boolean,
            value: true
        },
        pauseCurrentVideo: {
            type: Boolean,
            value: false,
            observer: function observer() {
                let current = this.data._last;
                let { curQueue } = this.data;
                let that = this;
                if (arguments[0]) {
                    curQueue.forEach(function (item) {
                        item.isPlay = false;
                    });
                }
                else {
                    this.data._videoContexts.forEach(function (index) {
                        if (current === index) {
                            that.data._videoContext.play();
                        }
                        else {
                            setTimeout(() => {
                                that.data._videoContext.pause();
                            }, 100);
                        }
                    });
                    curQueue.forEach(function (item, index) {
                        item.isPlay = current === index ? true : false;
                    });
                }
                this.setData({
                    curQueue
                });
            }
        },
        videoList: {
            type: Array,
            value: [],
            observer: function observer() {
                var newVal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                newVal && this._videoListChanged(newVal);
            }
        },
    },
    data: {
        nextQueue: [],
        prevQueue: [],
        curQueue: [],
        circular: false,
        _last: 0,
        _change: -2,
        _invalidUp: 0,
        _invalidDown: 0,
        _videoContexts: [],
        diff: 0,
        showCommentList: false,
        hotReplyLists: [],
        newReplyLists: [],
        touchDirction: 0,
        lastTime: 0,
        lastTimeoutFunc: [],
        hasLogin: false,
        showLoginPop: false,
        time_id: 600,
        like_imgs: [],
    },
    lifetimes: {
        attached() {
        }
    },
    methods: {
        touchStart: function (e) {
            touchDotX = e.touches[0].pageX;
            touchDotY = e.touches[0].pageY;
        },
        touchEnd: function (e) {
            let { curQueue } = this.data;
            let touchMoveX = e.changedTouches[0].pageX;
            let touchMoveY = e.changedTouches[0].pageY;
            let tmX = touchMoveX - touchDotX;
            let tmY = touchMoveY - touchDotY;
            let absX = Math.abs(tmX);
            let absY = Math.abs(tmY);
            if (absY > absX * 2 && tmY < 10) {
                console.log("上滑动=====", this.data.diff, this.data.nextQueue);
                curQueue.forEach((item, index) => {
                    if (this.data._last === index) {
                        item.isSeek = true;
                    }
                    else {
                        item.isSeek = false;
                    }
                });
                this.setData({
                    touchDirction: 1,
                    curQueue
                });
            }
            else if (absY > absX * 2 && tmY > 100) {
                console.log("下滑动=====", this.data.diff, this.data.prevQueue);
                curQueue.forEach((item, index) => {
                    if (this.data._last === index) {
                        item.isSeek = true;
                    }
                    else {
                        item.isSeek = false;
                    }
                });
                this.setData({
                    touchDirction: 2,
                    curQueue
                });
                if (!this.data.prevQueue.length && this.data._last == 0) {
                    this.setData({
                        prevQueue: [],
                        nextQueue: []
                    });
                    this.triggerEvent('funcPulldownRefresh');
                }
            }
        },
        _videoListChanged: function _videoListChanged(newVal) {
            var _this = this;
            var data = this.data;
            data.nextQueue = newVal;
            if (data.curQueue.length === 0) {
                data.curQueue.forEach((item) => {
                    item.isPlay = false;
                    item.isCurrent = false;
                });
                this.setData({
                    curQueue: data.nextQueue.splice(0, 3)
                }, function () {
                    _this.playCurrent(0);
                    _this.triggerEvent('change', { activeVideo: data.curQueue[0] });
                });
            }
        },
        animationfinish: function animationfinish(e) {
            let that = this;
            let { _last, _change, curQueue, prevQueue, nextQueue, touchDirction } = this.data;
            var current = e.detail.current;
            var diff = current - _last;
            if (diff === 0) {
                this.setData({
                    diff: 0
                });
                return;
            }
            this.data._last = current;
            this.playCurrent(current);
            this.triggerEvent('change', { activeVideo: curQueue[current] });
            var direction = diff === 1 || diff === -2 ? 'up' : 'down';
            if (nextQueue.length === 2 && touchDirction == 1) {
                this.triggerEvent('funcPagination');
            }
            if (direction === 'up') {
                if (this.data._invalidDown === 0) {
                    var change = (_change + 1) % 3;
                    if (change < 0) {
                        this.setData({
                            _change: change
                        });
                        return;
                    }
                    var add = nextQueue.shift();
                    var remove = curQueue[change];
                    if (add) {
                        prevQueue.push(remove);
                        curQueue[change] = add;
                        this.data._change = change;
                    }
                    else {
                        this.data._invalidUp += 1;
                    }
                }
                else {
                    this.data._invalidDown -= 1;
                }
            }
            if (direction === 'down') {
                if (this.data._invalidUp === 0) {
                    var _change2 = _change;
                    var _remove = curQueue[_change2];
                    var _add = prevQueue.pop();
                    if (_add) {
                        curQueue[_change2] = _add;
                        nextQueue.unshift(_remove);
                        this.data._change = (_change - 1 + 3) % 3;
                    }
                    else {
                        this.data._invalidDown += 1;
                    }
                }
                else {
                    this.data._invalidUp -= 1;
                }
            }
            var circular = true;
            if (nextQueue.length === 0 && current !== 0) {
                circular = false;
            }
            if (prevQueue.length === 0 && current !== 2) {
                circular = false;
            }
            console.log(prevQueue, curQueue, nextQueue);
            this.setData({
                curQueue,
                prevQueue,
                nextQueue,
                circular,
            }, function () {
                that.playCurrent(current);
                that.triggerEvent('change', { activeVideo: that.data.curQueue[current] });
            });
        },
        playCurrent: function playCurrent(current) {
            let { curQueue } = this.data;
            console.log('输出正在播放的列表', curQueue);
            curQueue.forEach((item, index) => {
                item.isPlay = index === current ? true : false;
                item.isCurrent = current === index ? true : false;
            });
            this.setData({
                curQueue
            });
        },
        gesture(e) {
            let currentTime = new Date().getTime();
            let { lastTime, lastTimeoutFunc, curQueue } = this.data;
            let current = e.currentTarget.dataset.index;
            let isPlay = e.currentTarget.dataset.isplay;
            if (currentTime - lastTime < 300) {
                clearTimeout(lastTimeoutFunc);
                this.drawLikeheart();
            }
            else {
                lastTimeoutFunc = setTimeout(() => {
                    curQueue.forEach((item, index) => {
                        if (current === index) {
                            item.isPlay = isPlay ? false : true;
                        }
                    });
                    this.setData({
                        curQueue
                    });
                }, 500);
            }
            this.setData({
                lastTime: currentTime,
                lastTimeoutFunc
            });
        },
        onPlay(e) {
            this.trigger(e, 'play');
        },
        onPause(e) {
            this.trigger(e, 'pause');
        },
        onEnded(e) {
            this.trigger(e, 'ended');
        },
        onError(e) {
            this.trigger(e, 'error');
        },
        onTimeUpdate(e) {
            this.trigger(e, 'timeupdate');
        },
        onWaiting(e) {
            this.trigger(e, 'wait');
        },
        onProgress(e) {
            this.trigger(e, 'progress');
        },
        onLoadedMetaData(e) {
            this.trigger(e, 'loadedmetadata');
        },
        trigger(e, type, ext = {}) {
            const detail = e.detail;
            const activeId = e.target.dataset.id;
            this.triggerEvent(type, Object.assign(Object.assign(Object.assign({}, detail), { activeId }), ext));
        },
        drawLikeheart() {
            var _this = this;
            if (_this.data.time_id) {
                clearTimeout(_this.data.time_id);
                var obj = {};
                obj.pageX = touchDotX - 40;
                obj.pageY = touchDotY - 40;
                var angle = Math.floor(Math.random() * 4);
                var animations = ['like-img-animate', 'like-img-animate-l', 'like-img-animate-r', 'like-img-animate-rr'];
                obj.animate = animations[angle];
                var like_imgs = _this.data.like_imgs.concat(obj);
                _this.setData({
                    like_imgs
                });
            }
            var time_id = setTimeout(function () {
                _this.setData({
                    like_imgs: [],
                });
            }, 600);
            _this.setData({
                time_id
            });
        },
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW9Td2lwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2aWRlb1N3aXBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztBQUNsQixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFDbEIsU0FBUyxDQUFDO0lBQ1IsVUFBVSxFQUFFO1FBQ1YsUUFBUSxFQUFFO1lBQ1IsSUFBSSxFQUFFLE1BQU07WUFDWixLQUFLLEVBQUUsR0FBRztTQUNYO1FBQ0QsY0FBYyxFQUFFO1lBQ2QsSUFBSSxFQUFFLE1BQU07WUFDWixLQUFLLEVBQUUsU0FBUztTQUNqQjtRQUNELElBQUksRUFBRTtZQUNKLElBQUksRUFBRSxPQUFPO1lBQ2IsS0FBSyxFQUFFLElBQUk7U0FDWjtRQUNELGlCQUFpQixFQUFFO1lBQ2pCLElBQUksRUFBRSxPQUFPO1lBQ2IsS0FBSyxFQUFFLEtBQUs7WUFDWixRQUFRLEVBQUUsU0FBUyxRQUFRO2dCQUN6QixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtnQkFDN0IsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUE7Z0JBQzVCLElBQUksSUFBSSxHQUFRLElBQUksQ0FBQTtnQkFDcEIsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2hCLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFTO3dCQUNsQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQTtvQkFDckIsQ0FBQyxDQUFDLENBQUM7aUJBQ0o7cUJBQU07b0JBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFVBQVcsS0FBVTt3QkFDcEQsSUFBSSxPQUFPLEtBQUssS0FBSyxFQUFFOzRCQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQTt5QkFDL0I7NkJBQU07NEJB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kOagh1xyXG5sZXQgdG91Y2hEb3RZID0gMDsvL3nmjInkuIvml7blnZDmoIdcclxuQ29tcG9uZW50KHtcclxuICBwcm9wZXJ0aWVzOiB7XHJcbiAgICBkdXJhdGlvbjoge1xyXG4gICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICAgIHZhbHVlOiA1MDBcclxuICAgIH0sXHJcbiAgICBlYXNpbmdGdW5jdGlvbjoge1xyXG4gICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgIHZhbHVlOiAnZGVmYXVsdCdcclxuICAgIH0sXHJcbiAgICBsb29wOiB7XHJcbiAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgIHZhbHVlOiB0cnVlXHJcbiAgICB9LFxyXG4gICAgcGF1c2VDdXJyZW50VmlkZW86IHtcclxuICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgdmFsdWU6IGZhbHNlLFxyXG4gICAgICBvYnNlcnZlcjogZnVuY3Rpb24gb2JzZXJ2ZXIoKSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLmRhdGEuX2xhc3RcclxuICAgICAgICBsZXQgeyBjdXJRdWV1ZSB9ID0gdGhpcy5kYXRhXHJcbiAgICAgICAgbGV0IHRoYXQ6IGFueSA9IHRoaXNcclxuICAgICAgICBpZiAoYXJndW1lbnRzWzBdKSB7XHJcbiAgICAgICAgICBjdXJRdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtOiBhbnkpIHtcclxuICAgICAgICAgICAgaXRlbS5pc1BsYXkgPSBmYWxzZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuZGF0YS5fdmlkZW9Db250ZXh0cy5mb3JFYWNoKGZ1bmN0aW9uICggaW5kZXg6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudCA9PT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgICB0aGF0LmRhdGEuX3ZpZGVvQ29udGV4dC5wbGF5KClcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAvLyDlronljZPnnJ/mnLp2aWRlb0NvbnRleHQucGF1c2UoKeaWueazleS4jei1t+S9nOeUqO+8n+WKoOWumuaXtuWZqFxyXG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhhdC5kYXRhLl92aWRlb0NvbnRleHQucGF1c2UoKVxyXG4gICAgICAgICAgICAgIH0sIDEwMClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjdXJyZW50ID09PSBpbmRleCA/IGN0eC5wbGF5KCkgOiBjdHgucGF1c2UoKVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBjdXJRdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtOiBhbnksIGluZGV4OiBhbnkpIHtcclxuICAgICAgICAgICAgaXRlbS5pc1BsYXkgPSBjdXJyZW50ID09PSBpbmRleCA/IHRydWUgOiBmYWxzZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICBjdXJRdWV1ZVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB2aWRlb0xpc3Q6IHtcclxuICAgICAgdHlwZTogQXJyYXksXHJcbiAgICAgIHZhbHVlOiBbXSxcclxuICAgICAgb2JzZXJ2ZXI6IGZ1bmN0aW9uIG9ic2VydmVyKCkge1xyXG4gICAgICAgIHZhciBuZXdWYWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xyXG4gICAgICAgIG5ld1ZhbCAmJiB0aGlzLl92aWRlb0xpc3RDaGFuZ2VkKG5ld1ZhbCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgfSxcclxuICBkYXRhOiB7XHJcbiAgICBuZXh0UXVldWU6IDxhbnk+W10sLyoq5pyq6KKr5pS+5YWlc3dpcGVy55qE5pWw57uEICovXHJcbiAgICBwcmV2UXVldWU6IDxhbnk+W10sLyoq5bey57uP6KKr5pS+5YWl6L+Hc3dpcGVy55qE5pWw57uEICovXHJcbiAgICBjdXJRdWV1ZTogPGFueT5bXSwvKirmlL7lhaVzd2lwZXLkuK3nmoTmlbDnu4QgKi9cclxuICAgIGNpcmN1bGFyOiBmYWxzZSxcclxuICAgIF9sYXN0OiAwLCAvKirorrDlvZVjdXJyZW5055qE5ruR5Yqo5YmN55qE5YC8ICovXHJcbiAgICBfY2hhbmdlOiAtMixcclxuICAgIF9pbnZhbGlkVXA6IDAsXHJcbiAgICBfaW52YWxpZERvd246IDAsXHJcbiAgICBfdmlkZW9Db250ZXh0czogPGFueT5bXSxcclxuICAgIGRpZmY6IDAsIC8qKiBkaWZm5Li6MOaXtuayoeaciea7keWKqCAqL1xyXG4gICAgc2hvd0NvbW1lbnRMaXN0OiBmYWxzZSxcclxuICAgIC8vIGNvbW1lbnRDb3VudDogMCxcclxuICAgIGhvdFJlcGx5TGlzdHM6IDxhbnk+W10sXHJcbiAgICBuZXdSZXBseUxpc3RzOiA8YW55PltdLFxyXG4gICAgdG91Y2hEaXJjdGlvbjogMCwvKioxIOS4iua7kSAyIOS4i+a7kSAqL1xyXG4gICAgbGFzdFRpbWU6IDAsIC8qKiDmnIDlkI7kuIDmrKHljZXlh7vkuovku7blj5HnlJ/nmoTml7bpl7QgKi9cclxuICAgIGxhc3RUaW1lb3V0RnVuYzogPGFueT5bXSwvKiog5Y2V5Ye75LqL5Lu26Kem5Y+R55qE5Ye95pWwKi9cclxuICAgIC8vIGlzUGF1c2U6IGZhbHNlLC8qKiDop4bpopHmmoLlgZzkuK0gKi9cclxuICAgIGhhc0xvZ2luOiBmYWxzZSwvKiog5piv5ZCm55m75b2VICovXHJcbiAgICBzaG93TG9naW5Qb3A6IGZhbHNlLC8qKiDmmL7npLrnmbvlvZXlvLnnqpcgKi9cclxuICAgIHRpbWVfaWQ6IDYwMCxcclxuICAgIGxpa2VfaW1nczogW10sXHJcbiAgfSxcclxuICBsaWZldGltZXM6IHtcclxuICAgIGF0dGFjaGVkKCkge1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgbWV0aG9kczoge1xyXG4gICAgdG91Y2hTdGFydDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgdG91Y2hEb3RYID0gZS50b3VjaGVzWzBdLnBhZ2VYOyAvLyDojrflj5bop6bmkbjml7bnmoTljp/ngrlcclxuICAgICAgdG91Y2hEb3RZID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xyXG4gICAgfSxcclxuICAgIC8vIOinpuaRuOe7k+adn+S6i+S7tlxyXG4gICAgdG91Y2hFbmQ6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIGxldCB7IGN1clF1ZXVlIH0gPSB0aGlzLmRhdGFcclxuICAgICAgbGV0IHRvdWNoTW92ZVggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYO1xyXG4gICAgICBsZXQgdG91Y2hNb3ZlWSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVk7XHJcbiAgICAgIGxldCB0bVggPSB0b3VjaE1vdmVYIC0gdG91Y2hEb3RYO1xyXG4gICAgICBsZXQgdG1ZID0gdG91Y2hNb3ZlWSAtIHRvdWNoRG90WTtcclxuICAgICAgbGV0IGFic1ggPSBNYXRoLmFicyh0bVgpO1xyXG4gICAgICBsZXQgYWJzWSA9IE1hdGguYWJzKHRtWSk7XHJcbiAgICAgIGlmIChhYnNZID4gYWJzWCAqIDIgJiYgdG1ZIDwgMTApIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIuS4iua7keWKqD09PT09XCIsIHRoaXMuZGF0YS5kaWZmLCB0aGlzLmRhdGEubmV4dFF1ZXVlKVxyXG4gICAgICAgIFxyXG4gICAgICAgIGN1clF1ZXVlLmZvckVhY2goKGl0ZW06IGFueSwgaW5kZXg6IGFueSkgPT4ge1xyXG4gICAgICAgICAgaWYgKHRoaXMuZGF0YS5fbGFzdCA9PT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgaXRlbS5pc1NlZWsgPSB0cnVlXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpdGVtLmlzU2VlayA9IGZhbHNlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgdG91Y2hEaXJjdGlvbjogMSxcclxuICAgICAgICAgIGN1clF1ZXVlXHJcbiAgICAgICAgfSlcclxuICAgICAgfSBlbHNlIGlmIChhYnNZID4gYWJzWCAqIDIgJiYgdG1ZID4gMTAwKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCLkuIvmu5Hliqg9PT09PVwiLCB0aGlzLmRhdGEuZGlmZiwgdGhpcy5kYXRhLnByZXZRdWV1ZSlcclxuICAgICAgICBjdXJRdWV1ZS5mb3JFYWNoKChpdGVtOiBhbnksIGluZGV4OiBhbnkpID0+IHtcclxuICAgICAgICAgIGlmICh0aGlzLmRhdGEuX2xhc3QgPT09IGluZGV4KSB7XHJcbiAgICAgICAgICAgIGl0ZW0uaXNTZWVrID0gdHJ1ZVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaXRlbS5pc1NlZWsgPSBmYWxzZVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgIHRvdWNoRGlyY3Rpb246IDIsXHJcbiAgICAgICAgICBjdXJRdWV1ZVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgaWYgKCF0aGlzLmRhdGEucHJldlF1ZXVlLmxlbmd0aCAmJiB0aGlzLmRhdGEuX2xhc3QgPT0gMCkge1xyXG4gICAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgICAgcHJldlF1ZXVlOiBbXSxcclxuICAgICAgICAgICAgbmV4dFF1ZXVlOiBbXVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KCdmdW5jUHVsbGRvd25SZWZyZXNoJylcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF92aWRlb0xpc3RDaGFuZ2VkOiBmdW5jdGlvbiBfdmlkZW9MaXN0Q2hhbmdlZChuZXdWYWwpIHtcclxuICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7XHJcbiAgICAgIC8vIG5ld1ZhbC5mb3JFYWNoKGFzeW5jIGZ1bmN0aW9uIChpdGVtOiBhbnksIGluZGV4OiBhbnkpIHtcclxuICAgICAgLy8gIH0pO1xyXG4gICAgICBkYXRhLm5leHRRdWV1ZSA9IG5ld1ZhbFxyXG5cclxuICAgICAgaWYgKGRhdGEuY3VyUXVldWUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgZGF0YS5jdXJRdWV1ZS5mb3JFYWNoKChpdGVtOmFueSkgPT4ge1xyXG4gICAgICAgICAgaXRlbS5pc1BsYXk9ZmFsc2VcclxuICAgICAgICAgIGl0ZW0uaXNDdXJyZW50PWZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgIGN1clF1ZXVlOiBkYXRhLm5leHRRdWV1ZS5zcGxpY2UoMCwgMylcclxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBfdGhpcy5wbGF5Q3VycmVudCgwKVxyXG4gICAgICAgICAgX3RoaXMudHJpZ2dlckV2ZW50KCdjaGFuZ2UnLCB7IGFjdGl2ZVZpZGVvOiBkYXRhLmN1clF1ZXVlWzBdIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGFuaW1hdGlvbmZpbmlzaDogZnVuY3Rpb24gYW5pbWF0aW9uZmluaXNoKGUpIHtcclxuICAgICAgbGV0IHRoYXQ6IGFueSA9IHRoaXNcclxuICAgICAgbGV0IHsgX2xhc3QsIF9jaGFuZ2UsIGN1clF1ZXVlLCBwcmV2UXVldWUsIG5leHRRdWV1ZSwgdG91Y2hEaXJjdGlvbiB9ID0gdGhpcy5kYXRhXHJcbiAgICAgIHZhciBjdXJyZW50ID0gZS5kZXRhaWwuY3VycmVudDtcclxuICAgICAgdmFyIGRpZmYgPSBjdXJyZW50IC0gX2xhc3Q7XHJcbiAgICAgIGlmIChkaWZmID09PSAwKSB7XHJcbiAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgIGRpZmY6IDBcclxuICAgICAgICB9KVxyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZGF0YS5fbGFzdCA9IGN1cnJlbnQ7XHJcbiAgICAgIHRoaXMucGxheUN1cnJlbnQoY3VycmVudCk7XHJcbiAgICAgIHRoaXMudHJpZ2dlckV2ZW50KCdjaGFuZ2UnLCB7IGFjdGl2ZVZpZGVvOiBjdXJRdWV1ZVtjdXJyZW50XSB9KTtcclxuICAgICAgdmFyIGRpcmVjdGlvbiA9IGRpZmYgPT09IDEgfHwgZGlmZiA9PT0gLTIgPyAndXAnIDogJ2Rvd24nO1xyXG4gICAgICBpZiAobmV4dFF1ZXVlLmxlbmd0aCA9PT0gMiAmJiB0b3VjaERpcmN0aW9uID09IDEpIHtcclxuICAgICAgICAvL+ivt+axguabtOWkmuaVsOaNrlxyXG4gICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KCdmdW5jUGFnaW5hdGlvbicpXHJcbiAgICAgIH1cclxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJykge1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGEuX2ludmFsaWREb3duID09PSAwKSB7XHJcbiAgICAgICAgICB2YXIgY2hhbmdlID0gKF9jaGFuZ2UgKyAxKSAlIDM7XHJcbiAgICAgICAgICBpZiAoY2hhbmdlIDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgICAgIF9jaGFuZ2U6IGNoYW5nZVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHZhciBhZGQgPSBuZXh0UXVldWUuc2hpZnQoKTtcclxuICAgICAgICAgIHZhciByZW1vdmUgPSBjdXJRdWV1ZVtjaGFuZ2VdO1xyXG4gICAgICAgICAgaWYgKGFkZCkge1xyXG4gICAgICAgICAgICBwcmV2UXVldWUucHVzaChyZW1vdmUpO1xyXG4gICAgICAgICAgICBjdXJRdWV1ZVtjaGFuZ2VdID0gYWRkO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuX2NoYW5nZSA9IGNoYW5nZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5faW52YWxpZFVwICs9IDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuZGF0YS5faW52YWxpZERvd24gLT0gMTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgfVxyXG4gICAgICBpZiAoZGlyZWN0aW9uID09PSAnZG93bicpIHtcclxuICAgICAgICBpZiAodGhpcy5kYXRhLl9pbnZhbGlkVXAgPT09IDApIHtcclxuXHJcbiAgICAgICAgICB2YXIgX2NoYW5nZTIgPSBfY2hhbmdlO1xyXG4gICAgICAgICAgdmFyIF9yZW1vdmUgPSBjdXJRdWV1ZVtfY2hhbmdlMl07XHJcbiAgICAgICAgICB2YXIgX2FkZCA9IHByZXZRdWV1ZS5wb3AoKTtcclxuICAgICAgICAgIGlmIChfYWRkKSB7XHJcbiAgICAgICAgICAgIGN1clF1ZXVlW19jaGFuZ2UyXSA9IF9hZGQ7XHJcbiAgICAgICAgICAgIG5leHRRdWV1ZS51bnNoaWZ0KF9yZW1vdmUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kYXRhLl9jaGFuZ2UgPSAoX2NoYW5nZSAtIDEgKyAzKSAlIDM7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuX2ludmFsaWREb3duICs9IDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuZGF0YS5faW52YWxpZFVwIC09IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgICB2YXIgY2lyY3VsYXIgPSB0cnVlO1xyXG4gICAgICBpZiAobmV4dFF1ZXVlLmxlbmd0aCA9PT0gMCAmJiBjdXJyZW50ICE9PSAwKSB7XHJcbiAgICAgICAgY2lyY3VsYXIgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAocHJldlF1ZXVlLmxlbmd0aCA9PT0gMCAmJiBjdXJyZW50ICE9PSAyKSB7XHJcbiAgICAgICAgY2lyY3VsYXIgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBjb25zb2xlLmxvZyhwcmV2UXVldWUsIGN1clF1ZXVlLCBuZXh0UXVldWUpXHJcblxyXG4gICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgIGN1clF1ZXVlLFxyXG4gICAgICAgIHByZXZRdWV1ZSxcclxuICAgICAgICBuZXh0UXVldWUsXHJcbiAgICAgICAgY2lyY3VsYXIsXHJcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGF0LnBsYXlDdXJyZW50KGN1cnJlbnQpO1xyXG4gICAgICAgIHRoYXQudHJpZ2dlckV2ZW50KCdjaGFuZ2UnLCB7IGFjdGl2ZVZpZGVvOiB0aGF0LmRhdGEuY3VyUXVldWVbY3VycmVudF0gfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIHBsYXlDdXJyZW50OiBmdW5jdGlvbiBwbGF5Q3VycmVudChjdXJyZW50KSB7XHJcbiAgICAgIGxldCB7IGN1clF1ZXVlIH0gPSB0aGlzLmRhdGFcclxuICAgICAgY29uc29sZS5sb2coJ+i+k+WHuuato+WcqOaSreaUvueahOWIl+ihqCcsY3VyUXVldWUpXHJcbiAgICAgIGN1clF1ZXVlLmZvckVhY2goKGl0ZW06IGFueSwgaW5kZXg6IGFueSkgPT4ge1xyXG4gICAgICAgIGl0ZW0uaXNQbGF5ID0gaW5kZXggPT09IGN1cnJlbnQgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgaXRlbS5pc0N1cnJlbnQgPSBjdXJyZW50ID09PSBpbmRleCA/IHRydWUgOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICBjdXJRdWV1ZVxyXG4gICAgICB9KVxyXG4gICAgfSxcclxuIFxyXG5cclxuICAgIGdlc3R1cmUoZTogYW55KSB7XHJcbiAgICAgIGxldCBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXHJcbiAgICAgIGxldCB7IGxhc3RUaW1lLCBsYXN0VGltZW91dEZ1bmMsIGN1clF1ZXVlIH0gPSB0aGlzLmRhdGFcclxuICAgICAgbGV0IGN1cnJlbnQgPSBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pbmRleFxyXG4gICAgICBsZXQgaXNQbGF5ID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaXNwbGF5XHJcbiAgICAgIGlmIChjdXJyZW50VGltZSAtIGxhc3RUaW1lIDwgMzAwKSB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KGxhc3RUaW1lb3V0RnVuYylcclxuICAgICAgICB0aGlzLmRyYXdMaWtlaGVhcnQoKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxhc3RUaW1lb3V0RnVuYyA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgY3VyUXVldWUuZm9yRWFjaCgoaXRlbTogYW55LCBpbmRleDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50ID09PSBpbmRleCkge1xyXG4gICAgICAgICAgICAgIGl0ZW0uaXNQbGF5ID0gaXNQbGF5ID8gZmFsc2UgOiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgICAgY3VyUXVldWVcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSwgNTAwKVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgbGFzdFRpbWU6IGN1cnJlbnRUaW1lLFxyXG4gICAgICAgIGxhc3RUaW1lb3V0RnVuY1xyXG4gICAgICB9KVxyXG4gICAgfSxcclxuXHJcbiAgIFxyXG4gICAgb25QbGF5KGUpIHtcclxuICAgICAgdGhpcy50cmlnZ2VyKGUsICdwbGF5JylcclxuICAgIH0sXHJcblxyXG4gICAgb25QYXVzZShlKSB7XHJcbiAgICAgIHRoaXMudHJpZ2dlcihlLCAncGF1c2UnKVxyXG4gICAgfSxcclxuXHJcbiAgICBvbkVuZGVkKGUpIHtcclxuICAgICAgdGhpcy50cmlnZ2VyKGUsICdlbmRlZCcpXHJcbiAgICB9LFxyXG5cclxuICAgIG9uRXJyb3IoZSkge1xyXG4gICAgICB0aGlzLnRyaWdnZXIoZSwgJ2Vycm9yJylcclxuICAgIH0sXHJcblxyXG4gICAgb25UaW1lVXBkYXRlKGUpIHtcclxuICAgICAgdGhpcy50cmlnZ2VyKGUsICd0aW1ldXBkYXRlJylcclxuICAgIH0sXHJcblxyXG4gICAgb25XYWl0aW5nKGUpIHtcclxuICAgICAgdGhpcy50cmlnZ2VyKGUsICd3YWl0JylcclxuICAgIH0sXHJcblxyXG4gICAgb25Qcm9ncmVzcyhlKSB7XHJcbiAgICAgIHRoaXMudHJpZ2dlcihlLCAncHJvZ3Jlc3MnKVxyXG4gICAgfSxcclxuXHJcbiAgICBvbkxvYWRlZE1ldGFEYXRhKGUpIHtcclxuICAgICAgdGhpcy50cmlnZ2VyKGUsICdsb2FkZWRtZXRhZGF0YScpXHJcbiAgICB9LFxyXG4gICAgdHJpZ2dlcihlLCB0eXBlLCBleHQgPSB7fSkge1xyXG4gICAgICBjb25zdCBkZXRhaWwgPSBlLmRldGFpbFxyXG4gICAgICBjb25zdCBhY3RpdmVJZCA9IGUudGFyZ2V0LmRhdGFzZXQuaWRcclxuICAgICAgdGhpcy50cmlnZ2VyRXZlbnQodHlwZSwgT2JqZWN0LmFzc2lnbih7Li4uZGV0YWlsLGFjdGl2ZUlkfSwgZXh0KSlcclxuICAgIH0sXHJcblxyXG4gICAgLyoqIOWPjOWHu+eCuei1niDniLHlv4MgKi9cclxuICAgIGRyYXdMaWtlaGVhcnQoKSB7XHJcbiAgICAgIHZhciBfdGhpcyA9IHRoaXNcclxuICAgICAgLy8gY29uc29sZS5sb2coJ+i/m+WFpeeCuei1nueIseW/g+WKqOeUuycsIF90aGlzLmRhdGEudGltZV9pZClcclxuICAgICAgaWYgKF90aGlzLmRhdGEudGltZV9pZCkgey8v5Yik5pat5piv5ZCm5pyJ5a6a5pe25ZmoXHJcbiAgICAgICAgLy/mr4/mrKHplIDmr4Hlrprml7blmajvvIzkuIvmlrnkvJrph43mlrDorr7lrprlrprml7blmahcclxuICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMuZGF0YS50aW1lX2lkKVxyXG4gICAgICAgIC8v55Sf5oiQ5LiA5Liq5paw55qE5Yqo55S75YWD57SgXHJcbiAgICAgICAgdmFyIG9iajogYW55ID0ge31cclxuICAgICAgICAvL+iuvuWumue6ouW/g+WdkOagh1xyXG4gICAgICAgIG9iai5wYWdlWCA9IHRvdWNoRG90WCAtIDQwXHJcbiAgICAgICAgb2JqLnBhZ2VZID0gdG91Y2hEb3RZIC0gNDBcclxuICAgICAgICAvL+eUn+aIkOmaj+acuuWKqOeUu+exu++8jOatpOWkhOaIkeaciTTnp43liqjnlLvvvIzmiYDku6Xpmo/mnLrku44wLTPkuYvpl7Tlj5blgLxcclxuICAgICAgICB2YXIgYW5nbGUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0KVxyXG4gICAgICAgIHZhciBhbmltYXRpb25zID0gWydsaWtlLWltZy1hbmltYXRlJywgJ2xpa2UtaW1nLWFuaW1hdGUtbCcsICdsaWtlLWltZy1hbmltYXRlLXInLCAnbGlrZS1pbWctYW5pbWF0ZS1yciddXHJcbiAgICAgICAgb2JqLmFuaW1hdGUgPSBhbmltYXRpb25zW2FuZ2xlXVxyXG4gICAgICAgIHZhciBsaWtlX2ltZ3MgPSBfdGhpcy5kYXRhLmxpa2VfaW1ncy5jb25jYXQob2JqKS8v5bCG5paw55qE5Yqo55S75YWD57Sg5Yqg5YWl5YiwbGlrZV9pbWdz5pWw57uE5LitXHJcbiAgICAgICAgX3RoaXMuc2V0RGF0YSh7Ly/nu5lsaWtlX2ltZ3PmlbDnu4TotYvlgLxcclxuICAgICAgICAgIGxpa2VfaW1nc1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2xpa2VfaW1ncycsIGxpa2VfaW1ncylcclxuICAgICAgfVxyXG4gICAgICB2YXIgdGltZV9pZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgey8v6K6+5a6a5a6a5pe25ZmoXHJcbiAgICAgICAgX3RoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICBsaWtlX2ltZ3M6IFtdLC8v5riF56m65Yqo55S75YWD57SgXHJcbiAgICAgICAgfSlcclxuICAgICAgfSwgNjAwKVxyXG4gICAgICBfdGhpcy5zZXREYXRhKHsvL+WwhuWumuaXtuWZqOWKoOWFpemhtemdouWPmOmHj+S4rVxyXG4gICAgICAgIHRpbWVfaWRcclxuICAgICAgfSlcclxuICAgICAgLy8gY29uc29sZS5sb2coJ3RpbWVfaWQnLHRpbWVfaWQsdGhpcy5kYXRhLnRpbWVfaWQpXHJcbiAgICB9LFxyXG4gIH0sXHJcblxyXG59KVxyXG5cclxuZXhwb3J0IHsgfSJdfQ==
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
let touchDotX = 0;
let touchDotY = 0;
Component({
    properties: {
        duration: {
            type: Number,
            value: 500
        },
        easingFunction: {
            type: String,
            value: 'default'
        },
        loop: {
            type: Boolean,
            value: true
        },
        pauseCurrentVideo: {
            type: Boolean,
            value: false,
            observer: function observer() {
                let current = this.data._last;
                let { curQueue } = this.data;
                let that = this;
                if (arguments[0]) {
                    curQueue.forEach(function (item) {
                        item.isPlay = false;
                    });
                }
                else {
                    this.data._videoContexts.forEach(function (index) {
                        if (current === index) {
                            that.data._videoContext.play();
                        }
                        else {
                            setTimeout(() => {
                                that.data._videoContext.pause();
                            }, 100);
                        }
                    });
                    curQueue.forEach(function (item, index) {
                        item.isPlay = current === index ? true : false;
                    });
                }
                this.setData({
                    curQueue
                });
            }
        },
        videoList: {
            type: Array,
            value: [],
            observer: function observer() {
                var newVal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                newVal && this._videoListChanged(newVal);
            }
        },
    },
    data: {
        nextQueue: [],
        prevQueue: [],
        curQueue: [],
        circular: false,
        _last: 0,
        _change: -2,
        _invalidUp: 0,
        _invalidDown: 0,
        _videoContexts: [],
        diff: 0,
        showCommentList: false,
        hotReplyLists: [],
        newReplyLists: [],
        touchDirction: 0,
        lastTime: 0,
        lastTimeoutFunc: [],
        hasLogin: false,
        showLoginPop: false,
        time_id: 600,
        like_imgs: [],
    },
    lifetimes: {
        attached() {
        }
    },
    methods: {
        touchStart: function (e) {
            touchDotX = e.touches[0].pageX;
            touchDotY = e.touches[0].pageY;
        },
        touchEnd: function (e) {
            let { curQueue } = this.data;
            let touchMoveX = e.changedTouches[0].pageX;
            let touchMoveY = e.changedTouches[0].pageY;
            let tmX = touchMoveX - touchDotX;
            let tmY = touchMoveY - touchDotY;
            let absX = Math.abs(tmX);
            let absY = Math.abs(tmY);
            if (absY > absX * 2 && tmY < 10) {
                console.log("上滑动=====", this.data.diff, this.data.nextQueue);
                curQueue.forEach((item, index) => {
                    if (this.data._last === index) {
                        item.isSeek = true;
                    }
                    else {
                        item.isSeek = false;
                    }
                });
                this.setData({
                    touchDirction: 1,
                    curQueue
                });
            }
            else if (absY > absX * 2 && tmY > 100) {
                console.log("下滑动=====", this.data.diff, this.data.prevQueue);
                curQueue.forEach((item, index) => {
                    if (this.data._last === index) {
                        item.isSeek = true;
                    }
                    else {
                        item.isSeek = false;
                    }
                });
                this.setData({
                    touchDirction: 2,
                    curQueue
                });
                if (!this.data.prevQueue.length && this.data._last == 0) {
                    this.setData({
                        prevQueue: [],
                        nextQueue: []
                    });
                    this.triggerEvent('funcPulldownRefresh');
                }
            }
        },
        _videoListChanged: function _videoListChanged(newVal) {
            var _this = this;
            var data = this.data;
            data.nextQueue = newVal;
            if (data.curQueue.length === 0) {
                data.curQueue.forEach((item) => {
                    item.isPlay = false;
                    item.isCurrent = false;
                });
                this.setData({
                    curQueue: data.nextQueue.splice(0, 3)
                }, function () {
                    _this.playCurrent(0);
                    _this.triggerEvent('change', { activeVideo: data.curQueue[0] });
                });
            }
        },
        animationfinish: function animationfinish(e) {
            let that = this;
            let { _last, _change, curQueue, prevQueue, nextQueue, touchDirction } = this.data;
            var current = e.detail.current;
            var diff = current - _last;
            if (diff === 0) {
                this.setData({
                    diff: 0
                });
                return;
            }
            this.data._last = current;
            this.playCurrent(current);
            this.triggerEvent('change', { activeVideo: curQueue[current] });
            var direction = diff === 1 || diff === -2 ? 'up' : 'down';
            if (nextQueue.length === 2 && touchDirction == 1) {
                this.triggerEvent('funcPagination');
            }
            if (direction === 'up') {
                if (this.data._invalidDown === 0) {
                    var change = (_change + 1) % 3;
                    if (change < 0) {
                        this.setData({
                            _change: change
                        });
                        return;
                    }
                    var add = nextQueue.shift();
                    var remove = curQueue[change];
                    if (add) {
                        prevQueue.push(remove);
                        curQueue[change] = add;
                        this.data._change = change;
                    }
                    else {
                        this.data._invalidUp += 1;
                    }
                }
                else {
                    this.data._invalidDown -= 1;
                }
            }
            if (direction === 'down') {
                if (this.data._invalidUp === 0) {
                    var _change2 = _change;
                    var _remove = curQueue[_change2];
                    var _add = prevQueue.pop();
                    if (_add) {
                        curQueue[_change2] = _add;
                        nextQueue.unshift(_remove);
                        this.data._change = (_change - 1 + 3) % 3;
                    }
                    else {
                        this.data._invalidDown += 1;
                    }
                }
                else {
                    this.data._invalidUp -= 1;
                }
            }
            var circular = true;
            if (nextQueue.length === 0 && current !== 0) {
                circular = false;
            }
            if (prevQueue.length === 0 && current !== 2) {
                circular = false;
            }
            console.log(prevQueue, curQueue, nextQueue);
            this.setData({
                curQueue,
                prevQueue,
                nextQueue,
                circular,
            }, function () {
                that.playCurrent(current);
                that.triggerEvent('change', { activeVideo: that.data.curQueue[current] });
            });
        },
        playCurrent: function playCurrent(current) {
            let { curQueue } = this.data;
            curQueue.forEach((item, index) => {
                item.isPlay = index === current ? true : false;
                item.isCurrent = current === index ? true : false;
            });
            this.setData({
                curQueue
            });
        },
        gesture(e) {
            let currentTime = new Date().getTime();
            let { lastTime, lastTimeoutFunc, curQueue } = this.data;
            let current = e.currentTarget.dataset.index;
            let isPlay = e.currentTarget.dataset.isplay;
            if (currentTime - lastTime < 300) {
                clearTimeout(lastTimeoutFunc);
                this.drawLikeheart();
            }
            else {
                lastTimeoutFunc = setTimeout(() => {
                    curQueue.forEach((item, index) => {
                        if (current === index) {
                            item.isPlay = isPlay ? false : true;
                        }
                    });
                    this.setData({
                        curQueue
                    });
                }, 500);
            }
            this.setData({
                lastTime: currentTime,
                lastTimeoutFunc
            });
        },
        onPlay(e) {
            this.trigger(e, 'play');
        },
        onPause(e) {
            this.trigger(e, 'pause');
        },
        onEnded(e) {
            this.trigger(e, 'ended');
        },
        onError(e) {
            this.trigger(e, 'error');
        },
        onTimeUpdate(e) {
            this.trigger(e, 'timeupdate');
        },
        onWaiting(e) {
            this.trigger(e, 'wait');
        },
        onProgress(e) {
            this.trigger(e, 'progress');
        },
        onLoadedMetaData(e) {
            this.trigger(e, 'loadedmetadata');
        },
        trigger(e, type, ext = {}) {
            const detail = e.detail;
            const activeId = e.target.dataset.id;
            this.triggerEvent(type, Object.assign(Object.assign(Object.assign({}, detail), { activeId }), ext));
        },
        drawLikeheart() {
            var _this = this;
            if (_this.data.time_id) {
                clearTimeout(_this.data.time_id);
                var obj = {};
                obj.pageX = touchDotX - 40;
                obj.pageY = touchDotY - 40;
                var angle = Math.floor(Math.random() * 4);
                var animations = ['like-img-animate', 'like-img-animate-l', 'like-img-animate-r', 'like-img-animate-rr'];
                obj.animate = animations[angle];
                var like_imgs = _this.data.like_imgs.concat(obj);
                _this.setData({
                    like_imgs
                });
            }
            var time_id = setTimeout(function () {
                _this.setData({
                    like_imgs: [],
                });
            }, 600);
            _this.setData({
                time_id
            });
        },
    },
});
//# sourceMappingURL=data:application/json;base64,